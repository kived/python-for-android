diff --git a/pymysql/cursors.py b/pymysql/cursors.py
index 6cd1813..a113d0a 100644
--- a/pymysql/cursors.py
+++ b/pymysql/cursors.py
@@ -108,23 +108,7 @@ class Cursor(object):
         while self.nextset():
             pass
 
-        if PY2:  # Use bytes on Python 2 always
-            encoding = conn.encoding
-
-            def ensure_bytes(x):
-                if isinstance(x, unicode):
-                    x = x.encode(encoding)
-                return x
-
-            query = ensure_bytes(query)
-
-            if args is not None:
-                if isinstance(args, (tuple, list)):
-                    args = tuple(map(ensure_bytes, args))
-                elif isinstance(args, dict):
-                    args = dict((ensure_bytes(key), ensure_bytes(val)) for (key, val) in args.items())
-                else:
-                    args = ensure_bytes(args)
+        args = self.get_args(conn, args)
 
         if args is not None:
             query = query % self._escape_args(args, conn)
@@ -154,6 +138,25 @@ class Cursor(object):
         self.rowcount = sum(self.execute(query, arg) for arg in args)
         return self.rowcount
 
+    def get_args(self, conn, args):
+        if PY2:  # Use bytes on Python 2 always
+            encoding = conn.encoding
+
+            def ensure_bytes(x):
+                if isinstance(x, unicode):
+                    x = x.encode(encoding)
+                return x
+
+            if args is not None:
+                if isinstance(args, (tuple, list)):
+                    args = tuple(map(ensure_bytes, args))
+                elif isinstance(args, dict):
+                    args = dict((ensure_bytes(key), ensure_bytes(val)) for (key, val) in args.items())
+                else:
+                    args = ensure_bytes(args)
+
+        return args
+
     def _do_execute_many(self, prefix, values, args, max_stmt_length, encoding):
         conn = self._get_db()
         escape = self._escape_args
@@ -161,13 +164,13 @@ class Cursor(object):
             prefix = prefix.encode(encoding)
         sql = bytearray(prefix)
         args = iter(args)
-        v = values % escape(next(args), conn)
+        v = values % escape(self.get_args(conn, next(args)), conn)
         if isinstance(v, text_type):
             v = v.encode(encoding)
         sql += v
         rows = 0
         for arg in args:
-            v = values % escape(arg, conn)
+            v = values % escape(self.get_args(conn, arg), conn)
             if isinstance(v, text_type):
                 v = v.encode(encoding)
             if len(sql) + len(v) + 1 > max_stmt_length:
